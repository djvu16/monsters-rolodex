{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sTAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,aAChF,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCJlBC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAAG,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHhDO,G,MAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aACnC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCmCrEG,E,kDAlCb,aAAc,IAAD,8BACX,gBAeFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAdpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IALH,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAMzC,WACE,MAA8BC,KAAKN,MAA3Bb,EAAR,EAAQA,SAASU,EAAjB,EAAiBA,YACXU,EAAiBpB,EAASqB,QAAO,SAAC3B,GACtC,OAAOA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAE3D,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BRI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.d3dc13f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=120x120`} alt=\"monsters\"/>\r\n            <h1>{props.monster.name}</h1>\r\n            <h2>{props.monster.email}</h2>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"./../card/card.component\";\r\n\r\nexport const CardList = props=>{\r\n    return(\r\n        <div className=\"card-list\">\r\n            {props.monsters.map(monster=> <Card key={monster.id} monster={monster}/>)}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\n\r\nexport const SearchBox= ({ placeholder,handleChange })=>{\r\n    return(\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    )\r\n}","import React,{ Component } from \"react\";\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n    //this.handleChange=this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=> response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  handleChange=(e)=>{\n    this.setState({searchField:e.target.value});\n  }\n  render(){\n    const { monsters,searchField}=this.state;\n    const filteredMonsters=monsters.filter((monster)=>{\n      return(monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    });\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange}/>\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}